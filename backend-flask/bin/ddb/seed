#!/usr/bin/env python3

import boto3
import sys, os
import uuid
from datetime import datetime, timedelta, timezone
from conversation import conversation

current_path = os.path.dirname(os.path.abspath(__file__))
parent_path = os.path.abspath(os.path.join(current_path, '..', '..'))
sys.path.append(parent_path)
from lib.db import db


def create_message_group(client, table_name, current_user_uuid, message_group_uuid, last_message_at=None, message=None, other_user_uuid=None, other_user_display_name=None, other_user_handle=None):
    
    record = {
        'pk': {'S': f"GRP#{current_user_uuid}"},
        'sk': {'S': last_message_at},
        'message_group_uuid': {'S': message_group_uuid},
        'message': {'S': message},
        'user_uuid': {'S': other_user_uuid},
        'user_display_name': {'S': other_user_display_name},
        'user_handle': {'S': other_user_handle}
    }
    
    # INSERT records into TABLE
    table_name = table_name
    response = client.put_item(
        TableName=table_name,
        Item=record
    )
    
    # Print the response
    print(f"CREATE-MESSAGE-GROUP Response-------------------------------\n{response}")
    if response['ResponseMetadata']['HTTPStatusCode'] == 200:
        print("PUT_ITEM operation succesful.\n")


def create_message(client, message_group_uuid, created_at, message, current_user_uuid, current_user_display_name, current_user_handle):

    record = {
        'pk': {'S': f"GRP#{message_group_uuid}"},
        'sk': {'S': created_at},
        'message_uuid': { 'S': str(uuid.uuid4()) },
        'message': {'S': message},
        'user_uuid': {'S': current_user_uuid},
        'user_display_name': {'S': current_user_display_name},
        'user_handle': {'S': current_user_handle}
    }

    table_name = 'cruddur-messages'
    response = client.put_item(
        TableName = table_name,
        Item = record
    )

    print(f"Response: {response}")


def get_user_uuids():

    # Look up users uding the user handles entered.
    sql = """
        SELECT
            users.uuid,
            users.display_name,
            users.handle
        FROM users
        WHERE
            users.handle IN(
                %(user_handle)s,
                %(other_handle)s
            )
    """

    users = db.query_json_array(sql, {
        'user_handle': 'mariachiinajar',
        'other_handle': 'mariachiinateam'
    })

    current_user = next((item for item in users if item['handle'] == 'mariachiinajar'), None)
    other_user = next((item for item in users if item['handle'] == 'mariachiinateam'), None)

    results = {
        'current_user': current_user,
        'other_user': other_user
    }

    print('get_user_uuids----------------------------------')
    print(results)
    return results    


######################### OPERATION STARTS HERE #########################

attrs = {
            'endpoint_url': 'http://localhost:8000'
        }


# unset endpoint url for use with production database. 
if len(sys.argv) == 2:
    if "prod" in sys.argv[1]:
        attrs = {}

# VARIABLES
# dynamodb = boto3.client('dynamodb', **attrs)  // connection to local machine
aws_default_region = os.getenv("AWS_DEFAULT_REGION")
dynamodbConnection = boto3.resource("dynamodb", region_name=aws_default_region)

table_name = "cruddur-messages"
now = datetime.now(timezone.utc).astimezone()
created_at = (now + timedelta(minutes=1)).isoformat()
users = get_user_uuids()
message_seed1 = "On the day of AWS Summit Seoul 2023."

message_group_uuid_seed1 = "5ae290ed-55d1-47a0-bc6d-fe2bc2700399"
message_group_uuid_seed2 = "5ae290ed-55d1-47a0-bc6d-fe2bc2700400"
message_group_uuid_seed3 = "5ae290ed-55d1-47a0-bc6d-fe2bc2700401"
message_group_uuid_variable = message_group_uuid_seed1

create_message_group(
    client=dynamodbConnection,
    table_name=table_name,
    message_group_uuid=message_group_uuid_variable,
    current_user_uuid=users['current_user']['uuid'],
    other_user_uuid=users['other_user']['uuid'],
    other_user_handle=users['other_user']['handle'],
    other_user_display_name=users['other_user']['display_name'],
    last_message_at=now.isoformat(),
    message=message_seed1
)

create_message_group(
    client=dynamodbConnection,
    table_name=table_name,
    message_group_uuid=message_group_uuid_variable,
    current_user_uuid=users['other_user']['uuid'],
    other_user_uuid=users['current_user']['uuid'],
    other_user_handle=users['current_user']['handle'],
    other_user_display_name=users['current_user']['display_name'],
    last_message_at=now.isoformat(),
    message=message_seed1
)



lines = conversation.lstrip('\n').rstrip('\n').split('\n')
for i in range(len(lines)):
    if lines[i].startswith('Person 1: '):
        key = 'current_user'
        message = lines[i].replace('Person 1: ', '')
    elif lines[i].startswith('Person 2: '):
        key = 'other_user'
        message = lines[i].replace('Person 2: ', '')
    else: 
        print(lines[i])
        raise 'invalid line'

    created_at = (now + timedelta(minutes=i)).isoformat()

    create_message(
        client=dynamodbConnection,
        message_group_uuid=message_group_uuid_variable,
        created_at=created_at,
        message=message,
        current_user_uuid=users[key]['uuid'],
        current_user_display_name=users[key]['display_name'],
        current_user_handle=users[key]['handle']
    )
