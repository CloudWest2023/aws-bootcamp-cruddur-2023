#!/usr/bin/env python3

import boto3
import os, sys, json

current_path = os.path.dirname(os.path.abspath(__file__))
parent_path = os.path.abspath(os.path.join(current_path, '..', '..', '..'))
sys.path.append(parent_path)
from lib.db import db


def get_user_uuids(handle):

    # Look up users uding the user handles entered.
    sql = """
        SELECT
            users.uuid
        FROM users
        WHERE
            users.handle=%(handle)s
    """
    uuid = db.query_value(sql, {
        'handle': handle
    })

    return uuid


attrs = {
            'endpoint_url': 'http://localhost:8000'
        }


if len(sys.argv) == 2:
    if "prod" in sys.argv[1]:
        attrs = {}

# dynamodb = boto3.client('dynamodb', **attrs)  // connection to local machine
aws_default_region = os.getenv("AWS_DEFAULT_REGION")
dynamodbConnection = boto3.resource("dynamodb", region_name=aws_default_region)

table_name = 'cruddur-messages'

# uuid values need updated in the future.
user_uuid_in_a_jar = get_user_uuids('mariachiinajar')
user_uuid_in_a_team = get_user_uuids('mariachiinateam')
print(f"user_uuid_in_a_jar: {user_uuid_in_a_jar}")
print(f"user_uuid_in_a_team: {user_uuid_in_a_team}")


# Define query parameters
query_params = {
    'TableName': table_name,
    'KeyConditionExpression': 'pk = :pk',
    'ExpressionAttributeValues': {
        ':pk': { 'S': f"{user_uuid_in_a_jar}" }
    },
    'ReturnConsumedCapacity': 'TOTAL'
}

# Query the table
response = dynamodb.query(**query_params)

# Print the items returned by the query
print(json.dumps(response, sort_keys=True, indent=2))