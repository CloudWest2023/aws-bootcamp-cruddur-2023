#!/usr/bin/env python3

import boto3
import os, sys, json
from datetime import datetime

current_path = os.path.dirname(os.path.abspath(__file__))
parent_path = os.path.abspath(os.path.join(current_path, '..', '..', '..'))
sys.path.append(parent_path)
from lib.db import db


# VARIABLES
aws_endpoint_url = os.getenv("AWS_ENDPOINT_URL")
attrs = {
            'endpoint_url': aws_endpoint_url
        }


if len(sys.argv) == 2:
    if "prod" in sys.argv[1]:
        attrs = {}

# Set up a DynamoDB local client
table_name = 'cruddur-messages-on-cloud'
ddb_client = boto3.client('dynamodb', **attrs)  # connection to local machine
# aws_default_region = os.getenv("AWS_DEFAULT_REGION")
# dynamodbConnection = boto3.resource("dynamodb", region_name=aws_default_region)


def get_current_user_uuid(handle):

    sql = """
        SELECT
            users.uuid
        FROM users
        WHERE
            users.handle=%(handle)s
    """
    uuid = db.query_value(sql, {
        'handle': handle
    })

    return uuid


# uuid values need updated in the future.
current_user_uuid = get_current_user_uuid('mariachiinajar')
# other_user_uuid = get_user_uuid('mariachiinateam')
year = str(datetime.now().year)

# Define query parameters
query_params = {
    'TableName': table_name,
    'KeyConditionExpression': 'pk = :pk', # AND begins_with(sk,:year)
    'ScanIndexForward': False,
    'ExpressionAttributeValues': {
        # 'year': { 'S': year },
        ':pk': { 'S': f"GRP#{current_user_uuid}" }
    },
    'ReturnConsumedCapacity': 'TOTAL'
}

# Query the table
response = ddb_client.query(**query_params)

# Print the items returned by the query
print(json.dumps(response, sort_keys=True, indent=2))